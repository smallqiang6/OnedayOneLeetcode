package test.week97;

//891. 鸡蛋掉落
//用户通过次数 0
//用户尝试次数 2
//通过次数 0
//提交次数 3
//题目难度 Hard
//你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。
//
//每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。
//
//你知道存在楼层 F ，满足 0 <= F <= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。
//
//每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 <= X <= N）。
//
//你的目标是确切地知道 F 的值是多少。
//
//无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？

//示例 1：
//
//输入：K = 1, N = 2
//输出：2
//解释：
//鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。
//否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。
//如果它没碎，那么我们肯定知道 F = 2 。
//因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。
//示例 2：
//
//输入：K = 2, N = 6
//输出：3
//示例 3：
//
//输入：K = 3, N = 14
//输出：4
/*//
 * 1 2 3 4 ---- 14
 * 7楼掉一下
 * 	7楼不破--8-14选11--11不破--选13--13不破------总共4次
 * 
 * 	
 * 
 * 
 * 
*/
public class Solution4 {
	public int superEggDrop(int K, int N) {

        int[][] dp = new int[101][10001];
        for (int i = 1; i <= 10000; i++) {
            dp[1][i] = i;

        }

        for (int i = 1; i <= 100; i++) {
            dp[i][1] = 1;
        }
        for (int i = 2; i <= 100; i++) {
            for (int j = 2; j <= 10000; j++) {
                dp[i][j] = dp[i][j - 1] + dp[i - 1][j - 1] + 1;
            }
        }

        for (int i = 1; i <= 10000; i++) {
            if (dp[K][i] >= N) {
                return i;
            }
        }
        return -1;
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
