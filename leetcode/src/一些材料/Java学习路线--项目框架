java学习路线--项目框架

https://blog.csdn.net/u013142781/article/details/75647501


基本工具：Eclipse、Maven、Tomcat

前端：Jquery、Vue.js、 Element

后台核心框架：Spring、SpringMVC、MyBatis

后台辅助框架：日志框架Logback、安全框架Shiro、任务调度框架Quartz

分布式框架：Dubbo、RabbitMQ、Redis…………..

除了这些框架还有一些特定业务场景，以及高扩展高可用的架构演变过程等等。 
主要分为下面三个阶段博客提纲。

阶段一：集中式基本架构
一、基本工具：Eclipse、Maven、Tomcat（此篇不写博客，关于Maven猿友可自行网上安装教程及博客）

二、Spring介绍及探索：主要就是依赖注入以及AOP原理，Spring使用大多以配置为主，因此从配置入手，结合源码探索其原理。

三、SpringMVC：以实例入手，结合源码探索其主要原理。

四、Mybatis：以实例入手，结合源码以及分页插件拓展探索其用法及原理。

五、日志框架Logback：结合实例、配置、源码了解其原理，并对Logback封装，使得更加符合实际业务需求。

六、前端框架Vue.js+Element使用，Jquery默认猿友已经会用了。

七、安全框架Shiro：主要登录及权限认证实例入手，探索其用法。

八、任务调度框架Quartz：实例+配置+源码探索用法及基本原理。

九、异步线程池使用及业务场景。

十、数据库事务实例及应用场景

十一、ehcache本地缓存实例及应用场景。

之所以阶段一叫集中式基本架构，是因为这种结构适合前端代码，后台代码在一个工程，部署到一台服务器上里面。带来的问题有：性能问题、工程十分臃肿、风险很大、不好迭代。

当然性能问题可以通过集群方式，就是部署到多台机器上，然后根据用户访问的ip进行分流到不同机器响应。目前web项目大多采用这种做法。

但是一旦业务及功能模块多了起来，需要快速迭代，必然要模块拆分。因此必须采用分布式架构。 
分布式架构一般根据功能进行划分模块，以电商为例：对外web端一个模块、管理web端、商品后台一个模块、订单支付后台等一个模块、用户信息后台一个模块。各个模块之间通过接口服务实时通信，异步通过MQ方式通信、缓存也需要使用分布式缓存框架。

接下来我们看下阶段二的博客提纲。

阶段二：高扩展、高性能、高可用、快速迭代分布式架构
一、分布式服务框架Dubbo：主要实例以及原理探索。

二、日志流水透传：让同一个请求经过的多个模块的日志流水保持一致。

三、分布式消息框架RabbitMQ：实例+配置+源码理解其原理。

四、任务调度框架Quartz改造：将所有模块的JOB任务集中管理，以服务调用形式触发。

五、分布式缓存框架Redis：了解其原理并规范使用，各个模块定义系统码，共享缓存内存资源，但是已系统码隔离。

六、前后端分离：对性能以及用户体验较高的web模块进行前后端分离，前端模块全部为静态资源，部署待静态资源服务器，与controller拆分开。

七、session共享：之前也提到根据功能划分模块，多个web模块对外提供请求相应，那么就会涉及session共享，一次登录即可。主要采用tomcat-redis技术实现session共享。

八、OAuth2.0认证和授权：这是扩展外部合作渠道的毕竟之路，如授权给外部商户获取你的用户信息。如微信公众号就是这种做法，很多可以使用微信登录以及QQ登录也是这种做法。

九、封装常用的业务工具类：如批量导入导出，ftp上传及下载文件、json处理等等。

十、将框架集成部分抽出形成一个基础框架：这个非常有意义，可以简化配置，对框架升级等等。

阶段三：适配大数据、高并发以及自动化要求（可能更偏向运维）
一、日志监控，自动告警：将ERROR日志通过邮件或短信方式发给对应的开发人员，可以起到很好的提醒作用。

二、自动化部署以及持续集成：模块多了，上线部署变得更加频繁的时候，就需要简化部署流程。

三、代理与负载均衡&集群：根据阶段二，一般web项目通过ip进行负载分流，后台可以使用Dubbo的负载均衡。

四、资源服务器搭建

五、数据读写分离

六、分库分表

七、秒杀设计

八、非关系型数据库使用

九、大数据工具的使用